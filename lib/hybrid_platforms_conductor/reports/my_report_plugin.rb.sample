# This file is an example of a Reports plugin that can be used to dump information about the platforms.
# The MyReportPlugin example contains example of code that could be used to write a plugin for a new kind of report.
require 'hybrid_platforms_conductor/report_plugin'

module HybridPlatformsConductor

  module Reports

    # Brief description of the plugin here.
    # The name should match the file name.
    # It should always inherit from ReportPlugin.
    # In all instance methods of a platform handler, the following variables are accessible:
    # * @nodes_handler (NodesHandler): Nodes handler used to access information about the platforms
    class MyReportPlugin < ReportPlugin

      # Give the list of supported locales by this report generator
      # [API] - This method is mandatory.
      #
      # Result::
      # * Array<Symbol>: List of supported locales
      def self.supported_locales
        # This method has to publish the list of translations it accepts.
        [
          :fr,
          :en
        ]
      end

      # Create a report for a list of hostnames, in a given locale
      # [API] - This method is mandatory.
      #
      # Parameters::
      # * *hosts* (Array<String>): List of hosts
      # * *locale_code* (Symbol): The locale code
      def report_for(hosts, locale_code)
        # This method simply returns the report for a given list of hostnames in the desired locale.
        # The locale will be one of the supported ones.
        output = ''
        case locale_code
        when :fr
          output << 'Un beau rapport'
        when :en
          output << 'A nice report'
        end
        @nodes_handler.platforms.each do |platform_handler|
          output << "= Report for platform #{platform_handler.repository_path} of type #{platform_handler.platform_type}:"
          platform_handler.known_hostnames.each do |hostname|
            output << "== Report for hostname #{hostname}:"
            output << @nodes_handler.metadata_for(hostname).to_s
          end
        end
        out output
      end

    end

  end

end
