# This file is an example of a generic Test plugin.
# The MyTestPlugin example contains example of code that could be used to write a plugin for new tests.
module HybridPlatformsConductor

  module Tests

    module Plugins

      # Brief description of the plugin here.
      # The name should match the file name.
      # It should always inherit from Tests::Test.
      #
      # A test plugin can define 1 or several test methods, whose name will drive the way the test is run:
      # * test: Global test run once.
      # * test_for_platform: Platform-specific test run once per platform.
      # * test_for_node: Node-specific test run once per node.
      # * test_on_node: Node-specific test that test some SSH command execution directly on the node.
      # * test_on_check_node: Node-specific test that test the result of a why-run deployment on the node.
      # * self.only_on_platforms: Give a list of the platform types this test is supposed to run on. If nil, it means all.
      # * self.only_on_nodes: Give a list of the node names this test is supposed to run on. If nil, it means all.
      #
      # In all instance methods of a test plugin, the following variables are accessible:
      # * @nodes_handler (NodesHandler): Nodes handler used to access information about the platforms
      # * @deployer (Deployer): Deployer used to deploy or check on the platforms
      # In all instance methods of a test plugin, the following methods can be used for assertions (see their description in the file test.rb):
      # * assert_equal(tested_object, expected_object, error_msg): Check equality between 2 objects and logs an error in case of mismatch.
      # * assert_match(tested_object, expected_object, error_msg): Check string Regexp matching and logs an error in case of mismatch.
      # * error(message): Log an error.
      class MyTestPlugin < Tests::Test

        # Run test
        def test
          # If this method is defined, it will be simply run as is.
          # This is useful to code global tests, that are not specific to 1 node or 1 platform.
          assert_equal 2 + 2, 4, 'If this is displayed, it\'s serious!'
        end

        # Run test for each platform
        # [API] - @platform can be used to adapt the code with the platform handling this node.
        def test_for_platform
          # If this method is defined, it will be used to execute once per platform to be tested.
          assert_match @platform.repository_path, /my_platform_.+/, 'Platform name does not follow naming convention'
        end

        # Run test for each node
        # [API] - @node can be used to adapt the code with the node.
        # [API] - @platform can be used to adapt the code with the platform handling this node.
        def test_for_node
          # If this method is defined, it will be used to execute once per node to be tested.
          assert_match @node, /my_node_.+/, 'Node name does not follow naming convention'
        end

        # Run test using SSH commands on the node.
        # Instead of executing the SSH commands directly on each node for each test, this method returns the list of commands to run and the test framework then groups them in 1 SSH connection.
        # [API] - @node can be used to adapt the command with the node.
        # [API] - @platform can be used to adapt the code with the platform handling this node.
        #
        # Result::
        # * Hash<String,Object>: For each command to execute, information regarding the assertion.
        #   * Values can be:
        #     * Proc: The code block making the test given the stdout of the command. Here is the Proc description:
        #       * Parameters::
        #         * *stdout* (Array<String>): List of lines of the stdout of the command.
        #         * *stderr* (Array<String>): List of lines of the stderr of the command.
        #         * *return_code* (Integer): The return code of the command.
        #     * Hash<Symbol,Object>: More complete information, that can contain the following keys:
        #       * *validator* (Proc): The proc containing the assertions to perform (as described above). This key is mandatory.
        #       * *timeout* (Integer): Timeout to wait for this command to execute.
        def test_on_node
          # If this method is defined, it will be used to execute SSH commands on each node that is being tested.
          # For each SSH command, a validator code block will be called with the stdout of the command run remotely on the node.
          # In place of a simple validator code block, a more complex structure can be used to give more info (for example timeout).
          {
            'echo 1' => proc do |stdout|
              assert_equal stdout.first, '1', 'Echo did not return 1 on the node!!!'
            end,
            "./longer_test_that_should_return_success.sh --hostname #{@node}" => {
              validator: proc do |stdout|
                error 'Test run but failed' if stdout.first == 'Start test' && !(stdout.last =~ /Success/)
              end,
              timeout: 30 # If the SSH session does not return in less than 30 seconds, we consider the test failed.
            }
          }
        end

        # Perform some testing on the check-node output.
        # [API] - @node can be used to know for which node the test is being run.
        # [API] - @platform can be used to adapt the code with the platform handling this node.
        #
        # Parameters::
        # * *stdout* (String): The check-node output
        # * *stderr* (String): The check-node standard error
        # * *exit_status* (Integer): The check-node exit status
        def test_on_check_node(stdout, stderr, exit_status)
          # If this method is defined, the tests runner will execute a why-run deploy on the node and call this method to have assertions on the stdout of the why-run deploy.
          assert_match stdout.split("\n").last, /Success/, 'check-node did not end correctly'
        end

        # Limit the list of platform types for these tests.
        #
        # Result::
        # * Array<Symbol> or nil: List of platform types allowed for this test, or nil for all
        def self.only_on_platforms
          [:chef]
        end

        # Limit the list of nodes for these tests.
        #
        # Result::
        # * Array<String or Regex> or nil: List of nodes allowed for this test, or nil for all. Regular expressions matching node names can also be used.
        def self.only_on_nodes
          [/^xaehpc.+/, 'project-pinger']
        end

      end

    end

  end

end
