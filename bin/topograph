#!/usr/bin/env ruby
require 'hybrid_platforms_conductor/nodes_handler'
require 'hybrid_platforms_conductor/cmd_runner'
require 'hybrid_platforms_conductor/ssh_executor'
require 'hybrid_platforms_conductor/deployer'
require 'hybrid_platforms_conductor/json_dumper'
require 'hybrid_platforms_conductor/topographer'
require 'optparse'

cmd_runner = HybridPlatformsConductor::CmdRunner.new
nodes_handler = HybridPlatformsConductor::NodesHandler.new
ssh_executor = HybridPlatformsConductor::SshExecutor.new(cmd_runner: cmd_runner, nodes_handler: nodes_handler)
deployer = HybridPlatformsConductor::Deployer.new(cmd_runner: cmd_runner, ssh_executor: ssh_executor)
json_dumper = HybridPlatformsConductor::JsonDumper.new(nodes_handler: nodes_handler, deployer: deployer)
topographer = HybridPlatformsConductor::Topographer.new(nodes_handler: nodes_handler, json_dumper: json_dumper)
deployer.timeout = 30
deployer.concurrent_execution = true
deployer.use_why_run = true
OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"
  opts.separator ''
  opts.separator 'Main options:'
  opts.on('-h', '--help', 'Display help and exit') do
    puts opts
    exit 0
  end
  topographer.options_parse(opts)
  nodes_handler.options_parse(opts)
  ssh_executor.options_parse(opts)
  deployer.options_parse(opts, parallel_switch: false, plugins_options: false)
end.parse!
ssh_executor.validate_params
deployer.validate_params
topographer.validate_params
raise "Unknown options: #{ARGV.join(' ')}" unless ARGV.empty?

# Initialize the topograph
from_hostnames, to_hostnames = topographer.resolve_from_to
topographer.get_json_files

# The list of clusters to group nodes into 1 graphviz node to simplify the graph.
known_hosts_lists = nodes_handler.known_hosts_lists

puts '===== Compute graph...'
topographer.graph_for(nodes_handler.known_hostnames)
puts '===== Add hosts lists clusters...'
topographer.graph_for_hostlists(known_hosts_lists)
puts '===== Define IP 24 clusters...'
topographer.define_clusters_ip_24
puts '===== Select path...'
from_nodes = topographer.children_nodes(from_hostnames)
to_nodes = topographer.ancestor_nodes(to_hostnames)
nodes = from_nodes & to_nodes
puts "===== Filter only nodes #{nodes.sort.join(', ')}..."
topographer.filter_in_nodes(nodes + topographer.cluster_nodes)
puts '===== Collapse hosts lists...'
topographer.collapse_nodes(known_hosts_lists)
puts '===== Remove self references...'
topographer.remove_self_connections
puts '===== Remove empty clusters...'
topographer.remove_empty_clusters
puts '===== Write outputs...'
topographer.dump_outputs
