#!/usr/bin/env ruby
require 'hybrid_platforms_conductor/executable'

test_host = nil
executable = HybridPlatformsConductor::Executable.new(
  check_options: false,
  nodes_selection_options: false,
  parallel_options: false,
  plugins_options: false
)
nodes_handler = executable.nodes_handler
deployer = executable.deployer
deployer.timeout = 30
deployer.concurrent_execution = true
deployer.use_why_run = true
topographer = executable.topographer

executable.parse_options!

# Initialize the topograph
from_hostnames, to_hostnames = topographer.resolve_from_to
topographer.get_json_files

# The list of clusters to group nodes into 1 graphviz node to simplify the graph.
known_hosts_lists = nodes_handler.known_hosts_lists

puts '===== Compute graph...'
topographer.graph_for(nodes_handler.known_hostnames)
puts '===== Add hosts lists clusters...'
topographer.graph_for_hostlists(known_hosts_lists)
puts '===== Define IP 24 clusters...'
topographer.define_clusters_ip_24
puts '===== Select path...'
from_nodes = topographer.children_nodes(from_hostnames)
to_nodes = topographer.ancestor_nodes(to_hostnames)
nodes = from_nodes & to_nodes
puts "===== Filter only nodes #{nodes.sort.join(', ')}..."
topographer.filter_in_nodes(nodes + topographer.cluster_nodes)
puts '===== Collapse hosts lists...'
topographer.collapse_nodes(known_hosts_lists)
puts '===== Remove self references...'
topographer.remove_self_connections
puts '===== Remove empty clusters...'
topographer.remove_empty_clusters
puts '===== Write outputs...'
topographer.dump_outputs
