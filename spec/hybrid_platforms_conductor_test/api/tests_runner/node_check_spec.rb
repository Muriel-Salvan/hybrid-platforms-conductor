describe HybridPlatformsConductor::TestsRunner do

  context 'checking node tests on check-node results' do

    # Prepare the test platform with test plugins
    #
    # Parameters::
    # * Proc: Code called with the platform setup
    def with_test_platform_for_node_check_tests
      with_test_platforms(
        'platform1' => { nodes: { 'node11' => {}, 'node12' => {} } },
        'platform2' => { nodes: { 'node21' => {}, 'node22' => {} }, platform_type: :test2 }
      ) do
        register_test_plugins(test_tests_runner,
          node_check_test: HybridPlatformsConductorTest::TestPlugins::NodeCheck,
          node_check_test_2: HybridPlatformsConductorTest::TestPlugins::NodeCheck
        )
        yield
      end
    end

    it 'executes check node tests once per node' do
      with_test_platform_for_node_check_tests do
        test_tests_runner.tests = [:node_check_test]
        expect(test_deployer).to receive(:deploy_for).with(%w[node11 node12 node21 node22]) do
          expect(test_deployer.use_why_run).to eq true
          {
            'node11' => [0, 'node11 check ok', 'node11 stderr'],
            'node12' => [0, 'node12 check ok', 'node12 stderr'],
            'node21' => [0, 'node21 check ok', 'node21 stderr'],
            'node22' => [0, 'node22 check ok', 'node22 stderr']
          }
        end
        expect(test_tests_runner.run_tests([{ all: true }])).to eq 0
        expect(HybridPlatformsConductorTest::TestPlugins::NodeCheck.runs.sort).to eq [
          [:node_test, 'node11', 'node11 check ok', 'node11 stderr', 0],
          [:node_test, 'node12', 'node12 check ok', 'node12 stderr', 0],
          [:node_test, 'node21', 'node21 check ok', 'node21 stderr', 0],
          [:node_test, 'node22', 'node22 check ok', 'node22 stderr', 0]
        ].sort
      end
    end

    it 'executes SSH node tests only on specified nodes' do
      with_test_platform_for_node_ssh_tests do
        expect_ssh_executor_runs([proc { |actions| expect_actions_to_test_nodes(actions, %w[12 22]) }])
        test_tests_runner.tests = [:node_ssh_test]
        ssh_executions = []
        HybridPlatformsConductorTest::TestPlugins::NodeSsh.node_tests = { node_ssh_test: {
          'node12' => { 'test_node12.sh' => proc { |stdout, exit_code| ssh_executions << ['node12', stdout, exit_code] } },
          'node22' => { 'test_node22.sh' => proc { |stdout, exit_code| ssh_executions << ['node22', stdout, exit_code] } }
        }}
        expect(test_tests_runner.run_tests(%w[node12 node22])).to eq 0
        expect(ssh_executions.sort).to eq [
          ['node12', ['stdout12'], 0],
          ['node22', ['stdout22'], 0]
        ].sort
      end
    end

    it 'executes several SSH node tests once per node with the correct command, grouping commands' do
      with_test_platform_for_node_ssh_tests do
        expect_ssh_executor_runs([proc do |actions|
          node_suffixes = %w[11 12 21 22]
          expect(actions.size).to eq node_suffixes.size
          node_suffixes.each do |node_suffix|
            node = "node#{node_suffix}"
            expect(actions.key?(node)).to eq true
            expect(actions[node][:actions].size).to eq 1
            expect(actions[node][:actions][:bash]).to eq [
              'echo \'===== TEST COMMAND EXECUTION ===== Separator generated by Hybrid Platforms Conductor test framework =====\'',
              "test_node#{node_suffix}.sh",
              'echo "$?"',
              'echo \'===== TEST COMMAND EXECUTION ===== Separator generated by Hybrid Platforms Conductor test framework =====\'',
              "test2_node#{node_suffix}.sh",
              'echo "$?"'
            ]
          end
          Hash[node_suffixes.map do |node_suffix|
            [
              "node#{node_suffix}",
              [
                0,
                "===== TEST COMMAND EXECUTION ===== Separator generated by Hybrid Platforms Conductor test framework =====\nstdout#{node_suffix}\n0\n===== TEST COMMAND EXECUTION ===== Separator generated by Hybrid Platforms Conductor test framework =====\nstdout#{node_suffix}_2\n0\n",
                ''
              ]
            ]
          end]
        end])
        test_tests_runner.tests = [:node_ssh_test, :node_ssh_test_2]
        ssh_executions = []
        HybridPlatformsConductorTest::TestPlugins::NodeSsh.node_tests = {
          node_ssh_test: {
            'node11' => { 'test_node11.sh' => proc { |stdout, exit_code| ssh_executions << ['node11', stdout, exit_code] } },
            'node12' => { 'test_node12.sh' => proc { |stdout, exit_code| ssh_executions << ['node12', stdout, exit_code] } },
            'node21' => { 'test_node21.sh' => proc { |stdout, exit_code| ssh_executions << ['node21', stdout, exit_code] } },
            'node22' => { 'test_node22.sh' => proc { |stdout, exit_code| ssh_executions << ['node22', stdout, exit_code] } }
          },
          node_ssh_test_2: {
            'node11' => { 'test2_node11.sh' => proc { |stdout, exit_code| ssh_executions << ['node11', stdout, exit_code] } },
            'node12' => { 'test2_node12.sh' => proc { |stdout, exit_code| ssh_executions << ['node12', stdout, exit_code] } },
            'node21' => { 'test2_node21.sh' => proc { |stdout, exit_code| ssh_executions << ['node21', stdout, exit_code] } },
            'node22' => { 'test2_node22.sh' => proc { |stdout, exit_code| ssh_executions << ['node22', stdout, exit_code] } }
          }
        }
        expect(test_tests_runner.run_tests([{ all: true }])).to eq 0
        expect(ssh_executions.sort).to eq [
          ['node11', ['stdout11'], 0],
          ['node12', ['stdout12'], 0],
          ['node21', ['stdout21'], 0],
          ['node22', ['stdout22'], 0],
          ['node11', ['stdout11_2'], 0],
          ['node12', ['stdout12_2'], 0],
          ['node21', ['stdout21_2'], 0],
          ['node22', ['stdout22_2'], 0]
        ].sort
      end
    end

    it 'fails an SSH node test when the SSH command returns non zero exit code' do
      with_test_platform_for_node_ssh_tests do
        expect_ssh_executor_runs([proc { |actions| expect_actions_to_test_nodes(actions, %w[11 12 21 22], fails_on: ['12']) }])
        test_tests_runner.tests = [:node_ssh_test]
        ssh_executions = []
        HybridPlatformsConductorTest::TestPlugins::NodeSsh.node_tests = { node_ssh_test: {
          'node11' => { 'test_node11.sh' => proc { |stdout, exit_code| ssh_executions << ['node11', stdout, exit_code] } },
          'node12' => { 'test_node12.sh' => proc { |stdout, exit_code| ssh_executions << ['node12', stdout, exit_code] } },
          'node21' => { 'test_node21.sh' => proc { |stdout, exit_code| ssh_executions << ['node21', stdout, exit_code] } },
          'node22' => { 'test_node22.sh' => proc { |stdout, exit_code| ssh_executions << ['node22', stdout, exit_code] } }
        }}
        expect(test_tests_runner.run_tests([{ all: true }])).to eq 1
        expect(ssh_executions.sort).to eq [
          ['node11', ['stdout11'], 0],
          ['node12', ['stdout12'], 1],
          ['node21', ['stdout21'], 0],
          ['node22', ['stdout22'], 0]
        ].sort
      end
    end

    it 'fails an SSH node test when the command test code raises an error' do
      with_test_platform_for_node_ssh_tests do
        expect_ssh_executor_runs([proc { |actions| expect_actions_to_test_nodes(actions, %w[11 12 21 22], fails_on: ['12']) }])
        test_tests_runner.tests = [:node_ssh_test]
        ssh_executions = []
        HybridPlatformsConductorTest::TestPlugins::NodeSsh.node_tests = { node_ssh_test: {
          'node11' => { 'test_node11.sh' => proc { |stdout, exit_code| ssh_executions << ['node11', stdout, exit_code] } },
          'node12' => { 'test_node12.sh' => proc { |stdout, exit_code| raise 'Failure on this node' } },
          'node21' => { 'test_node21.sh' => proc { |stdout, exit_code| ssh_executions << ['node21', stdout, exit_code] } },
          'node22' => { 'test_node22.sh' => proc { |stdout, exit_code| ssh_executions << ['node22', stdout, exit_code] } }
        }}
        expect(test_tests_runner.run_tests([{ all: true }])).to eq 1
        expect(ssh_executions.sort).to eq [
          ['node11', ['stdout11'], 0],
          ['node21', ['stdout21'], 0],
          ['node22', ['stdout22'], 0]
        ].sort
      end
    end

    it 'executes SSH node tests only on valid platform types' do
      with_test_platform_for_node_ssh_tests do
        HybridPlatformsConductorTest::TestPlugins::NodeSsh.only_on_platform_types = %i[test2]
        expect_ssh_executor_runs([proc { |actions| expect_actions_to_test_nodes(actions, %w[21 22]) }])
        test_tests_runner.tests = [:node_ssh_test]
        ssh_executions = []
        HybridPlatformsConductorTest::TestPlugins::NodeSsh.node_tests = { node_ssh_test: {
          'node21' => { 'test_node21.sh' => proc { |stdout, exit_code| ssh_executions << ['node21', stdout, exit_code] } },
          'node22' => { 'test_node22.sh' => proc { |stdout, exit_code| ssh_executions << ['node22', stdout, exit_code] } }
        }}
        expect(test_tests_runner.run_tests([{ all: true }])).to eq 0
        expect(ssh_executions.sort).to eq [
          ['node21', ['stdout21'], 0],
          ['node22', ['stdout22'], 0]
        ].sort
      end
    end

    it 'executes SSH node tests only on valid nodes' do
      with_test_platform_for_node_ssh_tests do
        HybridPlatformsConductorTest::TestPlugins::NodeSsh.only_on_nodes = %w[node12 node22]
        expect_ssh_executor_runs([proc { |actions| expect_actions_to_test_nodes(actions, %w[12 22]) }])
        test_tests_runner.tests = [:node_ssh_test]
        ssh_executions = []
        HybridPlatformsConductorTest::TestPlugins::NodeSsh.node_tests = { node_ssh_test: {
          'node12' => { 'test_node12.sh' => proc { |stdout, exit_code| ssh_executions << ['node12', stdout, exit_code] } },
          'node22' => { 'test_node22.sh' => proc { |stdout, exit_code| ssh_executions << ['node22', stdout, exit_code] } }
        }}
        expect(test_tests_runner.run_tests([{ all: true }])).to eq 0
        expect(ssh_executions.sort).to eq [
          ['node12', ['stdout12'], 0],
          ['node22', ['stdout22'], 0]
        ].sort
      end
    end

    it 'executes SSH node tests only on valid platform types and nodes' do
      with_test_platform_for_node_ssh_tests do
        HybridPlatformsConductorTest::TestPlugins::NodeSsh.only_on_platform_types = %i[test2]
        HybridPlatformsConductorTest::TestPlugins::NodeSsh.only_on_nodes = %w[node12 node22]
        expect_ssh_executor_runs([proc { |actions| expect_actions_to_test_nodes(actions, %w[22]) }])
        test_tests_runner.tests = [:node_ssh_test]
        ssh_executions = []
        HybridPlatformsConductorTest::TestPlugins::NodeSsh.node_tests = { node_ssh_test: {
          'node22' => { 'test_node22.sh' => proc { |stdout, exit_code| ssh_executions << ['node22', stdout, exit_code] } }
        }}
        expect(test_tests_runner.run_tests([{ all: true }])).to eq 0
        expect(ssh_executions.sort).to eq [
          ['node22', ['stdout22'], 0]
        ].sort
      end
    end

  end

end
